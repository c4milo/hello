// Code generated by protoc-gen-go.
// source: hello.proto
// DO NOT EDIT!

/*
Package hello is a generated protocol buffer package.

It is generated from these files:
	hello.proto

It has these top-level messages:
	Count
	CountsResponse
	SayHiRequest
	SayHiResponse
*/
package hello

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis/google/api"
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Count contains the visitor name and her number of visits.
type Count struct {
	Name  string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Count uint64 `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
}

func (m *Count) Reset()                    { *m = Count{} }
func (m *Count) String() string            { return proto.CompactTextString(m) }
func (*Count) ProtoMessage()               {}
func (*Count) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Count) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Count) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

// CountsResponse contains a list of visitors and visits.
type CountsResponse struct {
	Counts []*Count `protobuf:"bytes,1,rep,name=counts" json:"counts,omitempty"`
}

func (m *CountsResponse) Reset()                    { *m = CountsResponse{} }
func (m *CountsResponse) String() string            { return proto.CompactTextString(m) }
func (*CountsResponse) ProtoMessage()               {}
func (*CountsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CountsResponse) GetCounts() []*Count {
	if m != nil {
		return m.Counts
	}
	return nil
}

// SayHiRequest contains the name of the person to send the greeting to.
type SayHiRequest struct {
	// Name is the name of the person to greet.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *SayHiRequest) Reset()                    { *m = SayHiRequest{} }
func (m *SayHiRequest) String() string            { return proto.CompactTextString(m) }
func (*SayHiRequest) ProtoMessage()               {}
func (*SayHiRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *SayHiRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// SayHiResponse returns a greeting message.
type SayHiResponse struct {
	// Greeting is the actual message.
	Greeting string `protobuf:"bytes,1,opt,name=greeting" json:"greeting,omitempty"`
}

func (m *SayHiResponse) Reset()                    { *m = SayHiResponse{} }
func (m *SayHiResponse) String() string            { return proto.CompactTextString(m) }
func (*SayHiResponse) ProtoMessage()               {}
func (*SayHiResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *SayHiResponse) GetGreeting() string {
	if m != nil {
		return m.Greeting
	}
	return ""
}

func init() {
	proto.RegisterType((*Count)(nil), "hello.Count")
	proto.RegisterType((*CountsResponse)(nil), "hello.CountsResponse")
	proto.RegisterType((*SayHiRequest)(nil), "hello.SayHiRequest")
	proto.RegisterType((*SayHiResponse)(nil), "hello.SayHiResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Hello service

type HelloClient interface {
	// SayHi greets a given name and records her visit.
	SayHi(ctx context.Context, in *SayHiRequest, opts ...grpc.CallOption) (*SayHiResponse, error)
	// Counts returns the number of visitors recorded.
	Counts(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*CountsResponse, error)
	// DeleteCounts resets the in-memory map that keeps track of visitors and number of visits.
	DeleteCounts(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
}

type helloClient struct {
	cc *grpc.ClientConn
}

func NewHelloClient(cc *grpc.ClientConn) HelloClient {
	return &helloClient{cc}
}

func (c *helloClient) SayHi(ctx context.Context, in *SayHiRequest, opts ...grpc.CallOption) (*SayHiResponse, error) {
	out := new(SayHiResponse)
	err := grpc.Invoke(ctx, "/hello.Hello/SayHi", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloClient) Counts(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*CountsResponse, error) {
	out := new(CountsResponse)
	err := grpc.Invoke(ctx, "/hello.Hello/Counts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloClient) DeleteCounts(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/hello.Hello/DeleteCounts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Hello service

type HelloServer interface {
	// SayHi greets a given name and records her visit.
	SayHi(context.Context, *SayHiRequest) (*SayHiResponse, error)
	// Counts returns the number of visitors recorded.
	Counts(context.Context, *google_protobuf1.Empty) (*CountsResponse, error)
	// DeleteCounts resets the in-memory map that keeps track of visitors and number of visits.
	DeleteCounts(context.Context, *google_protobuf1.Empty) (*google_protobuf1.Empty, error)
}

func RegisterHelloServer(s *grpc.Server, srv HelloServer) {
	s.RegisterService(&_Hello_serviceDesc, srv)
}

func _Hello_SayHi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SayHiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloServer).SayHi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hello.Hello/SayHi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloServer).SayHi(ctx, req.(*SayHiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hello_Counts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloServer).Counts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hello.Hello/Counts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloServer).Counts(ctx, req.(*google_protobuf1.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hello_DeleteCounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloServer).DeleteCounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hello.Hello/DeleteCounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloServer).DeleteCounts(ctx, req.(*google_protobuf1.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Hello_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hello.Hello",
	HandlerType: (*HelloServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHi",
			Handler:    _Hello_SayHi_Handler,
		},
		{
			MethodName: "Counts",
			Handler:    _Hello_Counts_Handler,
		},
		{
			MethodName: "DeleteCounts",
			Handler:    _Hello_DeleteCounts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hello.proto",
}

func init() { proto.RegisterFile("hello.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 307 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x50, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x25, 0xb5, 0xa9, 0x76, 0x5a, 0x2d, 0x8e, 0x55, 0x4b, 0xf4, 0x50, 0x16, 0x0f, 0xa1, 0x42,
	0x16, 0x2b, 0x78, 0xf3, 0xa4, 0x42, 0xc0, 0x83, 0x10, 0xbf, 0x20, 0x95, 0x31, 0x06, 0xd2, 0xdd,
	0xd8, 0xdd, 0x1c, 0x8a, 0x78, 0xf1, 0x17, 0xfc, 0x34, 0x7f, 0xc1, 0xbb, 0xbf, 0x20, 0xd9, 0xdd,
	0x94, 0x0a, 0x8a, 0xb7, 0x7d, 0xfb, 0xde, 0xbc, 0x37, 0xf3, 0xa0, 0xf7, 0x44, 0x45, 0x21, 0xa3,
	0x72, 0x21, 0xb5, 0x44, 0xdf, 0x80, 0xe0, 0x38, 0x93, 0x32, 0x2b, 0x88, 0xa7, 0x65, 0xce, 0x53,
	0x21, 0xa4, 0x4e, 0x75, 0x2e, 0x85, 0xb2, 0xa2, 0xe0, 0xc8, 0xb1, 0x06, 0xcd, 0xaa, 0x47, 0x4e,
	0xf3, 0x52, 0x2f, 0x2d, 0xc9, 0xce, 0xc0, 0xbf, 0x92, 0x95, 0xd0, 0x88, 0xd0, 0x16, 0xe9, 0x9c,
	0x46, 0xde, 0xd8, 0x0b, 0xbb, 0x89, 0x79, 0xe3, 0x10, 0xfc, 0x87, 0x9a, 0x1c, 0xb5, 0xc6, 0x5e,
	0xd8, 0x4e, 0x2c, 0x60, 0x17, 0xb0, 0x63, 0x46, 0x54, 0x42, 0xaa, 0x94, 0x42, 0x11, 0x9e, 0x40,
	0xc7, 0x50, 0x6a, 0xe4, 0x8d, 0x37, 0xc2, 0xde, 0xb4, 0x1f, 0xd9, 0x25, 0x8d, 0x2c, 0x71, 0x1c,
	0x63, 0xd0, 0xbf, 0x4f, 0x97, 0x71, 0x9e, 0xd0, 0x73, 0x45, 0xea, 0xd7, 0x44, 0x76, 0x0a, 0xdb,
	0x4e, 0xe3, 0xac, 0x03, 0xd8, 0xca, 0x16, 0x44, 0x3a, 0x17, 0x99, 0x13, 0xae, 0xf0, 0xf4, 0xcb,
	0x03, 0x3f, 0xae, 0x83, 0xf0, 0x16, 0x7c, 0x33, 0x86, 0x7b, 0x2e, 0x79, 0x3d, 0x28, 0x18, 0xfe,
	0xfc, 0xb4, 0xce, 0xec, 0xf0, 0xed, 0xe3, 0xf3, 0xbd, 0xb5, 0x8b, 0x03, 0x6e, 0x58, 0xfe, 0x52,
	0x2f, 0x70, 0x39, 0x79, 0xc5, 0x18, 0x3a, 0xf6, 0x3e, 0x3c, 0x88, 0x6c, 0x75, 0x51, 0x53, 0x5d,
	0x74, 0x53, 0x57, 0x17, 0xec, 0xaf, 0xdf, 0xb7, 0xaa, 0x81, 0x0d, 0x8c, 0x63, 0x17, 0x37, 0xb9,
	0xbd, 0x18, 0xef, 0xa0, 0x7f, 0x4d, 0x05, 0x69, 0xfa, 0xc7, 0xef, 0x8f, 0xff, 0xc6, 0x70, 0xd2,
	0x18, 0xce, 0x3a, 0x46, 0x70, 0xfe, 0x1d, 0x00, 0x00, 0xff, 0xff, 0xa9, 0x38, 0x5b, 0x8d, 0x05,
	0x02, 0x00, 0x00,
}
